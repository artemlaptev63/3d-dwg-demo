{"version":3,"sources":["Model.js","App.js","serviceWorker.js","index.js"],"names":["Autodesk","window","THREE","Model","urn","token","viewerApp","Viewing","ViewingApplication","useState","selectedId","setSelectedId","onDocumentLoadSuccess","doc","viewables","bubble","search","length","selectItem","data","onItemLoadSuccess","onItemLoadFail","onDocumentLoadFailure","viewerErrorCode","alert","viewer","item","zoom","nav","navigation","pos","getPosition","target","getTarget","viewdir","Vector3","subVectors","normalize","multiplyScalar","add","setPosition","addEventListener","SELECTION_CHANGED_EVENT","e","dbIdArray","errorCode","options","env","getAccessToken","onGetAccessToken","config3d","extensions","useEffect","Initializer","registerViewer","k3D","Viewer3D","loadDocument","className","id","App","setToken","setUrn","style","display","value","onChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAGMA,G,YAAWC,OAAOD,UAClBE,EAAQD,OAAOC,MAERC,EAAQ,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MACpBC,EAAY,IAAIN,EAASO,QAAQC,mBAAmB,eADrB,EAEDC,mBAAS,kBAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAIrC,SAASC,EAAsBC,GACzB,IAAIC,EAAYR,EAAUS,OAAOC,OAAO,CAAC,KAAO,aACvB,IAArBF,EAAUG,QAGdX,EAAUY,WAAWJ,EAAU,GAAGK,KAAMC,EAAmBC,GAG/D,SAASC,EAAsBC,GAC3BC,MAAM,8BAA+BD,GAGzC,SAASH,EAAkBK,EAAQC,GACjC,IAAIC,EAAO,EACA,oFAARvB,IACDuB,EAAO,KAGT,IAAMC,EAAMH,EAAOI,WACbC,EAAMF,EAAIG,cACVC,EAASJ,EAAIK,YACfC,EAAU,IAAIhC,EAAMiC,QACxBD,EAAQE,WAAWN,EAAKE,GAAQK,YAChCH,EAAQI,eAAeX,GACvBG,EAAIS,IAAIL,GACRN,EAAIY,YAAYV,GAGhBL,EAAOgB,iBAAiBzC,EAASO,QAAQmC,yBAAyB,SAACC,GAC5DA,EAAEC,UAAU,GACXjC,EAAc,kBAAD,OAAmBgC,EAAEC,UAAU,KAE5CjC,EAAc,qBAMxB,SAASU,EAAewB,GACtBrB,MAAM,uBAAwBqB,GAGlC,IAAMC,EAAU,CACdC,IAAK,qBACLC,eAAgB,SAASC,GAGvBA,EAFoB5C,EACM,QAKxB6C,EAAW,CACfC,WAAY,IAYd,OATAC,qBAAU,WACRpD,EAASO,QAAQ8C,YAAYP,GAAS,WACpCxC,EAAUgD,eAAehD,EAAUiD,IAAKvD,EAASO,QAAQiD,SAAUN,GACnE5C,EAAUmD,aAAarD,EAAKQ,EAAuBU,QAEpD,IAKD,yBAAKoC,UAAU,WACb,yBAAKC,GAAG,cAAcjD,GACtB,yBAAKiD,GAAG,kBCrDCC,MApBf,WAAgB,IAAD,EACanD,mBAAS,IADtB,mBACNJ,EADM,KACCwD,EADD,OAESpD,mBAAS,IAFlB,mBAENL,EAFM,KAED0D,EAFC,KAGb,OACE,6BACE,yBAAKC,MAAO,CAACC,QAAS,SACpB,yBAAKN,UAAU,aAAf,QAEE,2BAAOO,MAAO5D,EAAO6D,SAAU,SAACvB,GAAD,OAAOkB,EAASlB,EAAEX,OAAOiC,QAAQP,UAAU,aAE5E,yBAAKA,UAAU,aAAf,MAEE,2BAAOO,MAAO7D,EAAK8D,SAAU,SAACvB,GAAD,OAAOmB,EAAOnB,EAAEX,OAAOiC,QAAQP,UAAU,cAGzErD,GAASD,GAAO,kBAAC,EAAD,CAAOC,MAAOA,EAAOD,IAAG,cAASA,OCPpC+D,QACW,cAA7BlE,OAAOmE,SAASC,UAEe,UAA7BpE,OAAOmE,SAASC,UAEhBpE,OAAOmE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.954a4738.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './Model.css';\n\nconst Autodesk = window.Autodesk;\nconst THREE = window.THREE;\n\nexport const Model = ({urn, token}) => {\n  const viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv');\n  const [selectedId, setSelectedId] = useState('Select element');\n\n  function onDocumentLoadSuccess(doc) {\n        var viewables = viewerApp.bubble.search({'type':'geometry'});\n        if (viewables.length === 0) {\n            return;\n        }\n        viewerApp.selectItem(viewables[1].data, onItemLoadSuccess, onItemLoadFail);\n    }\n    \n    function onDocumentLoadFailure(viewerErrorCode) {\n        alert('Error onDocumentLoadFailure', viewerErrorCode);\n    }\n    \n    function onItemLoadSuccess(viewer, item) {\n      let zoom = 1;\n      if(urn === 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6YWpiYWRiYXNuZGJhbXNkbmFfL2RldGFpbC5kd2c') {\n        zoom = 10000;\n      }\n      /* change zoom */\n      const nav = viewer.navigation;\n      const pos = nav.getPosition();\n      const target = nav.getTarget();\n      var viewdir = new THREE.Vector3();\n      viewdir.subVectors(pos, target).normalize();\n      viewdir.multiplyScalar(zoom);\n      pos.add(viewdir);\n      nav.setPosition(pos);\n      /* change zoom */\n\n      viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, (e) => {\n          if(e.dbIdArray[0]) {\n              setSelectedId(`Selected ID is ${e.dbIdArray[0]}`);\n          } else {\n              setSelectedId('Select element');\n          }\n          \n      })\n    }\n    \n    function onItemLoadFail(errorCode) {\n      alert('Error onItemLoadFail', errorCode);\n    }\n\n  const options = {\n    env: 'AutodeskProduction',\n    getAccessToken: function(onGetAccessToken) {\n      const accessToken = token;\n      const expireTimeSeconds = 3600;\n      onGetAccessToken(accessToken, expireTimeSeconds);\n    }\n  };\n\n  const config3d = {\n    extensions: []\n  };\n\n  useEffect(() => {\n    Autodesk.Viewing.Initializer(options, function onInitialized() {\n      viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Viewer3D, config3d);\n      viewerApp.loadDocument(urn, onDocumentLoadSuccess, onDocumentLoadFailure);            \n    });\n  }, []);\n\n\n\n  return (\n    <div className=\"wrapper\">\n      <div id=\"selectedId\">{selectedId}</div>\n      <div id=\"MyViewerDiv\"></div>\n    </div>\n  )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Model} from './Model';\n// eyJhbGciOiJIUzI1NiIsImtpZCI6Imp3dF9zeW1tZXRyaWNfa2V5In0.eyJzY29wZSI6WyJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiZGF0YTpjcmVhdGUiLCJidWNrZXQ6cmVhZCIsImJ1Y2tldDpjcmVhdGUiXSwiY2xpZW50X2lkIjoiTmxrWDBMRkNsU2duQTNtcGxyWnRUWTRhUURBVkRETGwiLCJhdWQiOiJodHRwczovL2F1dG9kZXNrLmNvbS9hdWQvand0ZXhwNjAiLCJqdGkiOiJkbTFkZldJMnNQOFpGekRXUWl0N29iUW1UTzF4U0M0NG5HR0xSN1daemxuUXc5Y0xWcWdrZkpNZVY0Q2ZsMmlSIiwiZXhwIjoxNTkyOTAzNDg2fQ.v4VlhbQ5VRW9DsNrgNOqx45v0rb-cLpdcK_HLLmr_ts\nfunction App() {\n  const [token, setToken] = useState('');\n  const [urn, setUrn] = useState('');\n  return (\n    <div>\n      <div style={{display: 'flex'}}>\n        <div className=\"container\">\n          Token\n          <input value={token} onChange={(e) => setToken(e.target.value)} className=\"control\"/>\n        </div>\n        <div className=\"container\">\n          URN\n          <input value={urn} onChange={(e) => setUrn(e.target.value)} className=\"control\"/>\n        </div>\n      </div>\n      {token && urn && <Model token={token} urn={`urn:${urn}`}/>}\n    </div>\n  );\n}\n\nexport default App;\n\n// detail dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6YWpiYWRiYXNuZGJhbXNkbmFfL2RldGFpbC5kd2c\n// mouse dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6YWpiYWRiYXNuZGJhbXNkbmFfL21vdXNlLmR3Zw\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}